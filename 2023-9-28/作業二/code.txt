module we ( A, B,sel, alu, parity);
input [3:0] A,B;
input [2:0] sel;
output [7:0] alu;
output  parity;
wire [3:0] x,y;



  reg [7:0] alu;
  reg parity;
  reg [3:0] H, H1;
  reg [3:0] i;


  always @(A or B or sel)
  begin
  
  H = 4'b0000; 
    H1 = 4'b0000; 
	 H=A;
	 H1=B;
 for(i=1;i<= data_rva(B);i=i+1)
 begin
     
    H = data_rvd(H);
 
 end
    for(i=1;i<= data_rva(A);i=i+1)
 begin
    
    H1 = data_rvs(H1);
 
 end
    
	 
    case (sel[2:0])
      3'b000: alu = {4'b0000, ~(A & B)};
      3'b001: alu = ~{4'b0000, B} + 1;
      3'b010: alu = {A | B, A | B};
      3'b011: alu = {A ^ B, ~(A | B)};
      3'b100: alu = (A >= B) ? {A[3], B[3], A[2], B[2], A[1], B[1], A[0], B[0]} : {B[3], A[3], B[2], A[2], B[1], A[1], B[0], A[0]};
      3'b101: alu = {A, B};
      3'b110: alu = {A, A} % B;
      3'b111: alu = {H, H1};
      default: alu = 8'b00000000;
    endcase

    if (^alu == 1)
      parity = 1;
    else
      parity = 0;
  end
  
  
  function [3:0] data_rvs;
    input [3:0] data;
    begin
	 
      data_rvs = {data[0], data[3:1]}; 
    end
  endfunction
  
  function [3:0] data_rvd;
    input [3:0] data;
    begin
	 
      data_rvd = { data[2:0],data[3]}; 
    end
  endfunction
  
  function [3:0] data_rva;
  input [3:0]data;
  reg[2:0] x;
begin
      x=data%4;
		case (x[2:0])
      3'b000: data_rva = 4'b0000;
      3'b001: data_rva = 4'b0001;
      3'b010: data_rva = 4'b0010;
      3'b011: data_rva = 4'b0011;
      3'b100: data_rva = 4'b0100;
      default: data_rva =4'b0000;
    endcase
  
  
  end
endfunction
endmodule
